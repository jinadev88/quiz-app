import React, { useState } from 'react';

// Define the quiz data with questions, options, and the correct answer.
const quizData = [
  {
    question: "외부 고객사와 첫 미팅이 잡혔습니다. 옷차림으로 가장 적절한 선택은?",
    options: ["깔끔한 정장 또는 비즈니스 캐주얼", "운동복과 모자", "회사 단체 티셔츠와 청바지"],
    correctAnswer: "깔끔한 정장 또는 비즈니스 캐주얼",
    category: "복장 매너",
  },
  {
    question: "인사 후 자기소개 시 가장 효과적인 방법은?",
    options: ["“저는 마케팅팀 김민수입니다. ○○프로젝트 담당입니다.”", "“저 김민수인데요… 그냥 마케팅합니다.”", "“저는 5년 차입니다. 취미는 등산이고…”"],
    correctAnswer: "“저는 마케팅팀 김민수입니다. ○○프로젝트 담당입니다.”",
    category: "인사·자기소개",
  },
  {
    question: "명함 교환 시 바람직하지 않은 행동은?",
    options: ["두 손으로 건넨다", "받은 명함을 잠시 보고 이름을 확인한다", "받은 즉시 주머니에 넣는다"],
    correctAnswer: "받은 즉시 주머니에 넣는다",
    category: "명함 매너",
  },
  {
    question: "회의실 좌석 배치 시, 고객 대표가 앉아야 할 자리는?",
    options: ["출입문과 가장 먼 자리(상석)", "회의실 모서리 자리", "문 바로 옆 자리"],
    correctAnswer: "출입문과 가장 먼 자리(상석)",
    category: "좌석 배치 매너",
  },
  {
    question: "이메일 제목 작성 시 가장 적절한 예시는?",
    options: ["“8/14(수) 마케팅 제안서 송부 드립니다.”", "“자료”", "“제안서 보세요”"],
    correctAnswer: "“8/14(수) 마케팅 제안서 송부 드립니다.”",
    category: "이메일 매너",
  },
  {
    question: "메신저로 상사에게 보고할 때 올바른 방법은?",
    options: ["“보고”만 보내고 파일 첨부", "핵심 요약 + 첨부파일 안내", "그냥 파일만 전송"],
    correctAnswer: "핵심 요약 + 첨부파일 안내",
    category: "메신저 매너",
  },
  {
    question: "고객이 전화를 받자마자 해야 할 인사는?",
    options: ["“네, 말씀하세요.”", "“안녕하세요, ○○회사 ○○팀의 △△△입니다.”", "“네, 누구시죠?”"],
    correctAnswer: "“안녕하세요, ○○회사 ○○팀의 △△△입니다.”",
    category: "전화 응대 매너",
  },
  {
    question: "발표 중 질문을 받았을 때 적절한 태도는?",
    options: ["질문을 끝까지 듣고 차분히 답한다", "질문 중간에 끊고 바로 답한다", "모른다고 하고 넘어간다"],
    correctAnswer: "질문을 끝까지 듣고 차분히 답한다",
    category: "대화 스킬",
  },
  {
    question: "상대방의 말을 경청하고 있다는 신호는?",
    options: ["고개 끄덕이기와 메모", "다른 창을 보며 “네네” 반복", "핸드폰 확인"],
    correctAnswer: "고개 끄덕이기와 메모",
    category: "경청 스킬",
  },
  {
    question: "긍정적 커뮤니케이션의 사례는?",
    options: ["“이 부분은 개선하면 더 좋은 결과가 나올 것 같습니다.”", "“이건 완전 잘못됐어요.”", "“그냥 다시 하세요.”"],
    correctAnswer: "“이 부분은 개선하면 더 좋은 결과가 나올 것 같습니다.”",
    category: "커뮤니케이션",
  },
  {
    question: "문제 해결 시 첫 단계는?",
    options: ["원인 분석", "책임자 지목", "보고서 작성"],
    correctAnswer: "원인 분석",
    category: "문제 해결",
  },
  {
    question: "고객이 기한을 앞당겨달라고 요청했을 때 올바른 대응은?",
    options: ["가능 여부를 검토 후 대안을 제시", "무조건 거절", "무조건 수락 후 진행"],
    correctAnswer: "가능 여부를 검토 후 대안을 제시",
    category: "고객 응대",
  },
  {
    question: "회의 중 팀원의 아이디어를 부정할 때 적절한 표현은?",
    options: ["“좋은 의견인데, 이런 점도 고려해보면 어떨까요?”", "“그건 말이 안 돼요.”", "“그건 안 돼요.”"],
    correctAnswer: "“좋은 의견인데, 이런 점도 고려해보면 어떨까요?”",
    category: "커뮤니케이션",
  },
  {
    question: "상사와 신뢰를 쌓는 가장 확실한 방법은?",
    options: ["마감 기한을 지키는 것", "업무 지시를 부분적으로 이행", "지시 내용을 내 방식대로 변경"],
    correctAnswer: "마감 기한을 지키는 것",
    category: "직장 내 관계",
  },
  {
    question: "협업 중 다른 팀에서 도움 요청 시 가장 바람직한 반응은?",
    options: ["가능 범위 내에서 일정 조율 후 지원", "내 업무만 하겠다며 거절", "그냥 무시"],
    correctAnswer: "가능 범위 내에서 일정 조율 후 지원",
    category: "협업 매너",
  },
  {
    question: "신입사원이 빠르게 전문성을 쌓는 방법은?",
    options: ["선배들의 노하우 기록 및 학습", "경험이 쌓일 때까지 기다림", "스스로 모든 걸 실험"],
    correctAnswer: "선배들의 노하우 기록 및 학습",
    category: "역량 개발",
  },
  {
    question: "피드백을 받았을 때 적절한 태도는?",
    options: ["경청 후 구체적 개선 방안을 묻는다", "바로 변명", "무시"],
    correctAnswer: "경청 후 구체적 개선 방안을 묻는다",
    category: "피드백 수용",
  },
  {
    question: "회의 전 아젠다를 공유하는 이유는?",
    options: ["회의 시간을 단축하고 효율성을 높이기 위해", "형식적인 절차이기 때문에", "누가 발언할지 미리 정하기 위해"],
    correctAnswer: "회의 시간을 단축하고 효율성을 높이기 위해",
    category: "회의 매너",
  },
  {
    question: "이메일 첨부파일 전송 시 반드시 확인해야 할 것은?",
    options: ["파일명, 형식, 내용, 크기", "용량만 확인", "제목만 확인"],
    correctAnswer: "파일명, 형식, 내용, 크기",
    category: "이메일 매너",
  },
  {
    question: "대면 미팅 시 지켜야 할 매너는?",
    options: ["약속 시간 5~10분 전에 도착", "정확히 약속 시간에 도착", "조금 늦게 가도 괜찮음"],
    correctAnswer: "약속 시간 5~10분 전에 도착",
    category: "미팅 매너",
  },
  {
    question: "외부 행사장에서 인사할 때 올바른 순서는?",
    options: ["직급이 높은 사람부터 소개", "나와 친한 사람부터 소개", "무작위 소개"],
    correctAnswer: "직급이 높은 사람부터 소개",
    category: "인사 매너",
  },
  {
    question: "상사가 지시한 업무 진행 상황을 공유할 때 좋은 방법은?",
    options: ["진행 현황과 예상 완료 일정을 함께 보고", "완료 후 한 번에 보고", "아무 보고 없이 끝까지 진행"],
    correctAnswer: "진행 현황과 예상 완료 일정을 함께 보고",
    category: "업무 보고",
  },
  {
    question: "전화로 고객 불만을 받을 때 올바른 대응은?",
    options: ["경청 후 불만 사항을 정리하여 재확인", "바로 변명", "감정적으로 대응"],
    correctAnswer: "경청 후 불만 사항을 정리하여 재확인",
    category: "고객 응대",
  },
  {
    question: "회의 중 스마트폰을 사용할 수 있는 경우는?",
    options: ["업무 관련 메모나 자료 검색 시", "개인 메시지 확인 시", "SNS 업로드 시"],
    correctAnswer: "업무 관련 메모나 자료 검색 시",
    category: "회의 매너",
  },
  {
    question: "팀원 간 피드백을 잘 주고받는 문화의 장점은?",
    options: ["성과 향상과 관계 개선", "갈등 증가", "불필요한 시간 낭비"],
    correctAnswer: "성과 향상과 관계 개선",
    category: "피드백 수용",
  },
  {
    question: "건설적 갈등 해결 방법은?",
    options: ["데이터와 사실에 기반해 대화", "감정적으로 반박", "상대방 의견 무시"],
    correctAnswer: "데이터와 사실에 기반해 대화",
    category: "갈등 관리",
  },
  {
    question: "협업 프로젝트에서 일정 지연 가능성이 보이면?",
    options: ["즉시 공유하고 조정 방안 협의", "숨기고 진행", "마감 직전에 보고"],
    correctAnswer: "즉시 공유하고 조정 방안 협의",
    category: "협업 매너",
  },
  {
    question: "고객 미팅 시 첫인상을 좋게 만드는 방법은?",
    options: ["단정한 복장, 미소, 눈맞춤", "편한 복장과 반말", "무표정 유지"],
    correctAnswer: "단정한 복장, 미소, 눈맞춤",
    category: "첫인상 관리",
  },
  {
    question: "상사에게 제안서를 보낼 때 제목 예시는?",
    options: ["“[제안서] ○○프로젝트 마케팅 전략(8/14 송부)”", "“제안서 보세요”", "“마케팅”"],
    correctAnswer: "“[제안서] ○○프로젝트 마케팅 전략(8/14 송부)”",
    category: "이메일 매너",
  },
  {
    question: "피드백을 받은 후 개선 계획을 보고하는 이유는?",
    options: ["실행 의지를 보여주고 신뢰 확보", "형식적인 절차", "기록을 남기기 위해서만"],
    correctAnswer: "실행 의지를 보여주고 신뢰 확보",
    category: "피드백 수용",
  }
];

// Inline SVG for the refresh icon
const RefreshIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2">
    <path d="M3.5 2c-.9-.4-1.9-.2-2.7.5C.1 3.4 0 4.5 0 5.5v13a2.5 2.5 0 002.5 2.5h18a2.5 2.5 0 002.5-2.5v-13c0-1.1-.1-2.2-.8-2.9-.8-.7-1.8-.9-2.7-.5l-8.5 4.5zM12 9v6M9 12h6"/>
  </svg>
);

// Inline SVG for the checkmark icon
const CheckCircleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M22 11.08V12a10 10 0 11-5.93-8.66"></path><path d="M22 4L12 14.01l-3-3"></path>
  </svg>
);

// Inline SVG for the X icon
const XCircleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="10"></circle><path d="M15 9l-6 6"></path><path d="M9 9l6 6"></path>
  </svg>
);

// The main App component for the quiz.
const App = () => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);

  // Handles the user's answer selection.
  const handleAnswerClick = (option) => {
    // If an answer has already been selected, do nothing.
    if (selectedAnswer) return;

    setSelectedAnswer(option);
    const isCorrect = option === quizData[currentQuestionIndex].correctAnswer;
    setIsAnswerCorrect(isCorrect);
    
    if (isCorrect) {
      setScore(score + 1);
    }
  };

  // Handles moving to the next question or showing results.
  const handleNextClick = () => {
    // If the user hasn't selected an answer, do nothing.
    if (!selectedAnswer) return;

    const nextQuestionIndex = currentQuestionIndex + 1;
    if (nextQuestionIndex < quizData.length) {
      setCurrentQuestionIndex(nextQuestionIndex);
      setSelectedAnswer(null);
      setIsAnswerCorrect(null);
    } else {
      setShowResults(true);
    }
  };

  // Handles restarting the quiz.
  const handleRestart = () => {
    setCurrentQuestionIndex(0);
    setScore(0);
    setShowResults(false);
    setSelectedAnswer(null);
    setIsAnswerCorrect(null);
  };

  // Renders the current question and options.
  const renderQuestion = () => {
    const question = quizData[currentQuestionIndex];
    return (
      <div className="flex flex-col space-y-6">
        <div className="p-6 bg-white rounded-xl shadow-lg border border-gray-100">
          <div className="text-sm text-gray-500 mb-2">
            문제 {currentQuestionIndex + 1} / {quizData.length}
          </div>
          <h2 className="text-xl font-bold text-gray-800 leading-tight">
            {question.question}
          </h2>
        </div>

        <div className="flex flex-col space-y-3">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerClick(option)}
              className={`
                flex items-center justify-between w-full p-4 text-left font-medium rounded-xl transition-all duration-200
                ${selectedAnswer === option
                  ? (isAnswerCorrect ? 'bg-green-500 text-white' : 'bg-red-500 text-white')
                  : 'bg-white text-gray-700 hover:bg-gray-50 shadow-sm border border-gray-200'
                }
              `}
            >
              <span>{option}</span>
              {selectedAnswer === option && (
                isAnswerCorrect ? (
                  <CheckCircleIcon className="ml-2 text-white" />
                ) : (
                  <XCircleIcon className="ml-2 text-white" />
                )
              )}
            </button>
          ))}
        </div>

        <button
          onClick={handleNextClick}
          className={`
            w-full py-4 text-white font-bold rounded-xl transition-all duration-200
            ${selectedAnswer
              ? 'bg-blue-600 hover:bg-blue-700 shadow-md'
              : 'bg-gray-300 cursor-not-allowed'
            }
          `}
          disabled={!selectedAnswer}
        >
          {currentQuestionIndex === quizData.length - 1 ? '결과 보기' : '다음 문제'}
        </button>
      </div>
    );
  };

  // Renders the final results screen.
  const renderResults = () => {
    return (
      <div className="flex flex-col items-center justify-center space-y-6 p-8 bg-white rounded-2xl shadow-xl border border-gray-100 text-center">
        <h2 className="text-3xl font-extrabold text-gray-900 mb-2">퀴즈 결과</h2>
        <p className="text-5xl font-extrabold text-blue-600">
          {score} / {quizData.length}
        </p>
        <p className="text-lg text-gray-600 font-medium">
          사회생활 능력치 올려주는 꿀팁! <br />비즈니스 매너, 얼마나 알고 있나요?
        </p>
        <button
          onClick={handleRestart}
          className="flex items-center justify-center mt-6 px-8 py-3 text-lg font-bold text-blue-600 bg-blue-100 rounded-full hover:bg-blue-200 transition-colors duration-200"
        >
          <RefreshIcon className="mr-2" />
          다시 시작하기
        </button>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4 antialiased">
      <div className="max-w-xl w-full mx-auto">
        <div className="bg-white rounded-3xl shadow-2xl p-8 md:p-12 border-t-8 border-blue-600">
          <h1 className="text-4xl font-extrabold text-center text-gray-900 mb-4 tracking-tight">
            비즈니스 매너 퀴즈
          </h1>
          <p className="text-center text-gray-500 mb-8 max-w-sm mx-auto">
            사회생활 능력치 올려주는 꿀팁! <br />비즈니스 매너, 나도 이제 프로!
          </p>
          
          {showResults ? renderResults() : renderQuestion()}
        </div>
      </div>
    </div>
  );
};

export default App;
